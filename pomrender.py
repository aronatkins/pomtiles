#!/usr/bin/env python3
# Takes as input a file with "slides" generated by pomtiler.py
# Outputs a series of rendered images suitable for compiling into a video

from PIL import Image
import random, json

SCREEN_WIDTH = 1920
SCREEN_HEIGHT = 1080
BG_COLOR = (255,252,233)
BLANK_BG_LIST = [(199,244,100),
(239,254,239),
(133,214,18),
(198,242,0)
]

with open("sources.json") as sourcefile:
    sources = json.load(sourcefile)

def main():

    with open("slide_deck.json") as deck:
        slide_deck = json.load(deck)

    img_suffix = 0

    for slide in slide_deck:
        num_rows = len(slide)
        num_columns = len(slide[0])
        
        tile_width = int(SCREEN_WIDTH/num_columns)
        tile_height = int(SCREEN_HEIGHT/num_rows)

        render = Image.new('RGB',(SCREEN_WIDTH,SCREEN_HEIGHT))
        
        paste_y = 0

        for row in slide:
            paste_x = 0
            for tile in row:
                if isfruit(tile):
                    render.paste(getfruit(tile, tile_width, tile_height),(paste_x,paste_y))
                else:
                    render.paste(getfill(tile, tile_width, tile_height),(paste_x,paste_y))
                paste_x += tile_width
            paste_y += tile_height

        new_filename = "imgs/img" + format(img_suffix,"03d") + ".png"
        render.save(new_filename)

        print("rendering " + new_filename)

        img_suffix += 1      
                

def isfruit(tile):
    if tile >= 0:
#    if tile%3 == 0:
        return True
    else:
        return False

def getfruit(tile, width, height):
    raw_wc = Image.open("sources/" + sources[str(tile)])

    wc_width, wc_height = raw_wc.size
    
#    if wc_height/height >= wc_width/width:
#        long_side = int(0.9*height)        
#    else:
#        long_side = int(0.9*width)    

    scaled_wc = raw_wc.copy()

    scaled_wc.thumbnail((int(0.9*width),int(0.9*height)))

    scaled_wc_width, scaled_wc_height = scaled_wc.size

    paste_x = int(width/2 - scaled_wc_width/2)
    paste_y = int(height/2 - scaled_wc_height/2)

    rendered_tile = Image.new('RGB',(width,height),BG_COLOR)
    rendered_tile.paste(scaled_wc,(paste_x,paste_y))

    return rendered_tile

def getfill(tile, width, height):
    
    blank_tile = Image.new('RGB',(width,height),random.choice(BLANK_BG_LIST))
    return blank_tile


if __name__ == "__main__":
    main()
